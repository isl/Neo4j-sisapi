Copyright 2015 Institute of Computer Science,
               Foundation for Research and Technology - Hellas.

Licensed under the EUPL, Version 1.1 or - as soon they will be approved
by the European Commission - subsequent versions of the EUPL (the "Licence");
You may not use this work except in compliance with the Licence.
You may obtain a copy of the Licence at:

     http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software distributed
under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Licence for the specific language governing permissions and limitations
under the Licence.

Contact:  POBox 1385, Heraklio Crete, GR-700 13 GREECE
Tel:+30-2810-391632
Fax: +30-2810-391638
E-mail: isl@ics.forth.gr
http://www.ics.forth.gr/isl

Authors: Elias Tzortzakakis <tzortzak@ics.forth.gr>

This file is part of the Neo4j-sisapi project.

Neo4j-sis-api 1.1
=============================================================================
Reference Id support per thesaurus + transliteration property support for searching
Added functionality:
- findLogicalNameByThesaurusReferenceId
- set_current_node_and_retrieve_Cmv
- get_matched_OnTransliteration
- resetCounter_For_ThesarusReferenceId
- createDatabaseIndexesAndConstraints
- Rename transltiteration together with rename Facet/ Hierarchy / New Descriptor in TMSAPI


Neo4j-sis-api
=============================================================================

"Neo4j sis api" version 1.0 is a Java Application Program 
Interface that was built in order to communicate with a Neo4j 
open source graph database configured to store and manage 
thesauri data.


The underlying Neo4j Database works in embedded mode and 
the neo4j jar files used for the database access come from
the Neo4j graph database version 2.2.5 community edition.


The Data Model used in Neo4j database follows the Telos[1,2,3] 
language representational framework specifications where the 
following implementation decisions were made:

- One Neo4j Node is created for each of the 4 Telos building blocks 
  (Individual class, Individual Token, Attribute Class, Attribute Token)
  
- Each Node has one and unique Neo4j Id and one Logical name which is not
  necessarily unique

- Level and Type of each TELOS building block are stored as Neo4j Labels
  
- Instance Of, Isa, From and To relations from Telos are stored as Neo4j Relationships
  
- Primitive Values (and Types) are stored as Neo4j Properties in Attribute Nodes



[1] Mylopoulos, J., Borgida, A.T., Jarke, M., & Koubarakis, M. (1990). 
	TELOS : Representing Knowledge About Information Systems. 1990
	http://www.cs.toronto.edu/~jm/Pub/Telos.pdf
	http://www.ics.forth.gr/tech-reports/1990/1990.TR024_Representing_Knowledge_Information_Systems.pdf
		
[2] Koubarakis, M., Mylopoulos, J., Stanley, M., & Borgida, A.T. (1989). 
	Telos : Features and Formalization. 1989
	http://www.ics.forth.gr/tech-reports/1989/1989.TR018_TELOS_Features_Formalization.pdf	
	
[3] Koubarakis, M., Mylopoulos, J., Stanley, M., & Jarke, M. (1988). 
	Telos : A Knowledge Representation Language for Requirements Modelling. 1988
	http://www.ics.forth.gr/tech-reports/1988/1988.TR016_Language_TELOS.pdf


